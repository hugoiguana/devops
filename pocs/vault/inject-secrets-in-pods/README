
https://developer.hashicorp.com/vault/tutorials/kubernetes/kubernetes-sidecar


# Kind - Cluster k8s:
kind create cluster --config kind.yml --name inject-secrets-in-pods
kind delete cluster --name inject-secrets-in-pods
kind get clusters
kind get nodes
kubectl get nodes
docker ps | grep kind
cat ~/.kube/conf


# Docker:
docker ps | grep inject-secrets-in-pods

# Kubernetes config:
kubectl config get-contexts
kubectl config use-context kind-inject-secrets-in-pods


# Install apps:
chmod 777 install-apps.sh
./install-apps.sh



# Kubectl commands used:
kubectl get pods



# Steps:

1 - Install Vault
  helm repo add hashicorp https://helm.releases.hashicorp.com
  helm repo update
  helm install vault hashicorp/vault --set "server.dev.enabled=true"
  kubectl get pods


2 - Set a secret in vault
  kubectl exec -it vault-0 -- /bin/sh
  vault secrets enable -path=internal kv-v2
  vault kv put internal/database/config username="db-readonly-username" password="db-secret-password"
  vault kv get internal/database/config
  exit

3 - Configure Kubernetes authentication
  kubectl exec -it vault-0 -- /bin/sh
  vault auth enable kubernetes
  vault write auth/kubernetes/config kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443"

vault policy write internal-app - <<EOF
path "internal/data/database/config" {
  capabilities = ["read"]
}
EOF

vault write auth/kubernetes/role/internal-app \
    bound_service_account_names=internal-app \
    bound_service_account_namespaces=default \
    policies=internal-app \
    ttl=24h

4 - Define a Kubernetes service account
  kubectl get serviceaccounts
  kubectl create sa internal-app

5 - Launch an application
  cat templates/deployment-orgchart.yaml
  kubectl apply --filename templates/deployment-orgchart.yaml
  kubectl get pods
  kubectl exec $(kubectl get pod -l app=orgchart -o jsonpath="{.items[0].metadata.name}") --container orgchart -- ls /vault/secrets

6 - Inject secrets into the pod
  cat templates/patch-inject-secrets.yaml
  kubectl patch deployment orgchart --patch "$(cat templates/patch-inject-secrets.yaml)"
  kubectl logs $(kubectl get pod -l app=orgchart -o jsonpath="{.items[0].metadata.name}") --container vault-agent
  kubectl exec $(kubectl get pod -l app=orgchart -o jsonpath="{.items[0].metadata.name}") --container orgchart -- cat /vault/secrets/database-config.txt

7 - Apply a template to the injected secrets
  cat templates/patch-inject-secrets-as-template.yaml
  kubectl patch deployment orgchart --patch "$(cat templates/patch-inject-secrets-as-template.yaml)"
  kubectl get pods
  kubectl exec $(kubectl get pod -l app=orgchart -o jsonpath="{.items[0].metadata.name}") -c orgchart -- cat /vault/secrets/database-config.txt

8 - Pod with annotations
  cat  templates/pod-payroll.yaml
  kubectl apply --filename templates/pod-payroll.yaml
  kubectl get pods
  kubectl exec payroll --container payroll -- cat /vault/secrets/database-config.txt

9 - Secrets are bound to the service account
  cat templates/deployment-website.yaml
  kubectl apply --filename templates/deployment-website.yaml
  kubectl get pods
  kubectl logs $(kubectl get pod -l app=website -o jsonpath="{.items[0].metadata.name}") --container vault-agent-init
  cat templates/patch-website.yaml
  kubectl patch deployment website --patch "$(cat templates/patch-website.yaml)"
  kubectl get pods
  kubectl exec $(kubectl get pod -l app=website -o jsonpath="{.items[0].metadata.name}") --container website -- cat /vault/secrets/database-config.txt

10 - Secrets are bound to the namespace
  kubectl create namespace offsite
  kubectl config set-context --current --namespace offsite
  cat templates/deployment-issues.yaml
  kubectl apply --filename templates/deployment-issues.yaml
  kubectl get pods
  kubectl logs $(kubectl get pod -l app=issues -o jsonpath="{.items[0].metadata.name}") --container vault-agent-init
  kubectl exec --namespace default -it vault-0 -- /bin/sh

  vault write auth/kubernetes/role/offsite-app \
    bound_service_account_names=internal-app \
    bound_service_account_namespaces=offsite \
    policies=internal-app \
    ttl=24h

  cat templates/patch-issues.yaml
  kubectl patch deployment issues --patch "$(cat templates/patch-issues.yaml)"
  kubectl get pods
  kubectl exec $(kubectl get pod -l app=issues -o jsonpath="{.items[0].metadata.name}") --container issues -- cat /vault/secrets/database-config.txt











