apiVersion: v1
kind: ConfigMap
metadata:
  name: {{.Release.Name }}-init-db
  namespace: {{ .Values.namespace }}
  labels:
    app: {{.Release.Name }}
data:
  config-db.sh: |
    #!/bin/bash
    set -e
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
      CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
      CREATE EXTENSION IF NOT EXISTS "pgcrypto";
      CREATE DATABASE "$APP_DB_NAME";
      CREATE USER ${APP_DB_USE} WITH PASSWORD '${APP_DB_PASSWORD}' VALID UNTIL '${APP_DB_EXPIRATION}' CONNECTION LIMIT ${APP_DB_CONNECTION_LIMIT};
      GRANT CONNECT ON DATABASE ${APP_DB_NAME} TO ${APP_DB_USE};


      SELECT 'CREATE DATABASE $APP_DB_NAME WITH LC_COLLATE ''C'' LC_CTYPE ''C'' TEMPLATE template0'
          WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$APP_DB_NAME')\gexec
          \connect $APP_DB_NAME;

      SELECT 'CREATE USER ${APP_DB_USE} WITH ENCRYPTED PASSWORD ''${APP_DB_PASSWORD}'''
          WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '${APP_DB_USE}')\gexec

      CREATE EXTENSION IF NOT EXISTS pgcrypto;
      CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
      CREATE SCHEMA IF NOT EXISTS ${APP_DB_SCHEMA};
      GRANT ${APP_DB_USE} TO ${POSTGRES_USER};
      GRANT ALL PRIVILEGES ON DATABASE $APP_DB_NAME TO ${APP_DB_USE};
      GRANT ALL ON ALL TABLES IN SCHEMA ${APP_DB_SCHEMA} TO ${APP_DB_USE};
      GRANT ALL ON ALL SEQUENCES IN SCHEMA ${APP_DB_SCHEMA} TO ${APP_DB_USE};
      GRANT ALL ON ALL FUNCTIONS IN SCHEMA ${APP_DB_SCHEMA} TO ${APP_DB_USE};
    EOSQL